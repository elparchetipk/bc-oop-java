/**
 * Programa que demuestra las diferencias entre una clase
 * SIN encapsulaci√≥n y una clase CON encapsulaci√≥n.
 *
 * Muestra los problemas que surgen cuando los datos no est√°n protegidos
 * y las ventajas de usar encapsulaci√≥n correctamente.
 *
 * @author Tu Nombre
 * @version 1.0
 */
public class DemostracionEncapsulacion {

    public static void main(String[] args) {

        System.out.println("========================================");
        System.out.println("DEMOSTRACI√ìN: SIN ENCAPSULACI√ìN");
        System.out.println("========================================\n");

        demostrarSinEncapsulacion();

        System.out.println("\n========================================");
        System.out.println("DEMOSTRACI√ìN: CON ENCAPSULACI√ìN");
        System.out.println("========================================\n");

        demostrarConEncapsulacion();

        System.out.println("\n========================================");
        System.out.println("CONCLUSI√ìN");
        System.out.println("========================================");
        System.out.println("‚úì Con encapsulaci√≥n, los datos est√°n protegidos");
        System.out.println("‚úì La validaci√≥n evita estados inv√°lidos");
        System.out.println("‚úì El comportamiento est√° controlado mediante m√©todos");
    }

    /**
     * Demuestra los problemas de NO usar encapsulaci√≥n.
     */
    private static void demostrarSinEncapsulacion() {
        // Crear cuenta sin encapsulaci√≥n
        CuentaBancariaSinEncapsulacion cuenta =
            new CuentaBancariaSinEncapsulacion("123456", "Juan P√©rez", 1000.0);

        System.out.println("Cuenta creada:");
        cuenta.mostrarInfo();

        // PROBLEMA 1: Podemos asignar valores inv√°lidos directamente
        System.out.println("\nPROBLEMA 1: Asignando saldo negativo directamente...");
        cuenta.saldo = -500.0;  // ‚ö†Ô∏è ¬°Nadie nos detiene!
        System.out.println("cuenta.saldo = -500.0");
        cuenta.mostrarInfo();
        System.out.println("¬°DATO INV√ÅLIDO! El saldo es negativo.");

        // PROBLEMA 2: Podemos dejar el titular vac√≠o
        System.out.println("\nPROBLEMA 2: Asignando titular vac√≠o...");
        cuenta.titular = "";  // ‚ö†Ô∏è ¬°Nadie nos detiene!
        System.out.println("cuenta.titular = \"\"");
        cuenta.mostrarInfo();
        System.out.println("¬°DATO INV√ÅLIDO! El titular est√° vac√≠o.");

        // PROBLEMA 3: Podemos modificar el n√∫mero de cuenta
        System.out.println("\nPROBLEMA 3: Modificando n√∫mero de cuenta...");
        cuenta.numeroCuenta = "999999";
        System.out.println("cuenta.numeroCuenta = \"999999\"");
        cuenta.mostrarInfo();
        System.out.println("¬°PROBLEMA! El n√∫mero de cuenta no deber√≠a cambiar.");
    }

    /**
     * Demuestra las ventajas de usar encapsulaci√≥n.
     */
    private static void demostrarConEncapsulacion() {
        // Crear cuenta con encapsulaci√≥n
        CuentaBancariaConEncapsulacion cuenta =
            new CuentaBancariaConEncapsulacion("789012", "Ana L√≥pez", 1000.0);

        System.out.println("Cuenta creada:");
        cuenta.mostrarInfo();

        // VENTAJA 1: No podemos acceder directamente a los atributos
        System.out.println("\nNo podemos hacer: cuenta.saldo = -500");
        System.out.println("(Dar√≠a error de compilaci√≥n)");

        // VENTAJA 2: El setter valida los datos
        System.out.println("\nIntentando establecer saldo negativo con setter...");
        cuenta.setSaldo(-500.0);  // ‚úÖ El setter rechaza el valor

        // VENTAJA 3: Los m√©todos controlan las operaciones
        System.out.println("\nIntentando retirar m√°s de lo disponible...");
        cuenta.retirar(2000.0);  // ‚úÖ El m√©todo rechaza la operaci√≥n

        // VENTAJA 4: Las operaciones v√°lidas funcionan correctamente
        System.out.println("\nDepositando $500...");
        cuenta.depositar(500.0);

        System.out.println("\nRetirando $300...");
        cuenta.retirar(300.0);

        System.out.println("\nEstado final:");
        cuenta.mostrarInfo();

        // VENTAJA 5: Solo podemos leer el n√∫mero de cuenta, no modificarlo
        System.out.println("\nN√∫mero de cuenta: " + cuenta.getNumeroCuenta());
        System.out.println("(No hay setter para el n√∫mero de cuenta - es de solo lectura)");
    }
}
# Ejercicio 1: Comparaci√≥n - Con y Sin Encapsulaci√≥n

## üéØ Objetivo

Comparar el comportamiento y las ventajas de una clase **con encapsulaci√≥n** versus una clase **sin encapsulaci√≥n**, entendiendo por qu√© es importante proteger los datos.

---

## üìù Descripci√≥n

Implementar√°s dos versiones de la misma clase `CuentaBancaria`:

1. **Sin encapsulaci√≥n**: Atributos p√∫blicos, sin validaci√≥n
2. **Con encapsulaci√≥n**: Atributos privados, getters/setters con validaci√≥n

Luego crear√°s un programa que demuestre las diferencias y problemas que surgen sin encapsulaci√≥n.

---

## üìã Requisitos

### Clase 1: `CuentaBancariaSinEncapsulacion`

- **Atributos p√∫blicos**:
  - `numeroCuenta` (String)
  - `titular` (String)
  - `saldo` (double)

- **Constructor**: Inicializa los tres atributos

- **M√©todo**: `mostrarInfo()` - Imprime la informaci√≥n de la cuenta

### Clase 2: `CuentaBancariaConEncapsulacion`

- **Atributos privados**:
  - `numeroCuenta` (String)
  - `titular` (String)
  - `saldo` (double)

- **Constructor**: Inicializa los tres atributos con validaci√≥n

- **Getters**: Para todos los atributos

- **Setters con validaci√≥n**:
  - `setTitular()`: No debe estar vac√≠o
  - `setSaldo()`: No debe ser negativo

- **M√©todos de negocio**:
  - `depositar(double monto)`: Suma al saldo si monto > 0
  - `retirar(double monto)`: Resta del saldo si hay fondos suficientes
  - `mostrarInfo()`: Imprime la informaci√≥n

### Clase 3: `DemostracionEncapsulacion`

Programa principal que:
1. Crea una cuenta sin encapsulaci√≥n
2. Muestra los problemas de acceso directo
3. Crea una cuenta con encapsulaci√≥n
4. Demuestra las ventajas de la validaci√≥n

---

## üîç Ejemplo de Salida Esperada

```
========================================
DEMOSTRACI√ìN: SIN ENCAPSULACI√ìN
========================================
Cuenta creada:
Cuenta[123456, Juan P√©rez, $1000.00]

PROBLEMA 1: Asignando saldo negativo directamente...
cuenta.saldo = -500.0
Cuenta[123456, Juan P√©rez, $-500.00]
¬°DATO INV√ÅLIDO! El saldo es negativo.

PROBLEMA 2: Asignando titular vac√≠o...
cuenta.titular = ""
Cuenta[123456, , $-500.00]
¬°DATO INV√ÅLIDO! El titular est√° vac√≠o.

========================================
DEMOSTRACI√ìN: CON ENCAPSULACI√ìN
========================================
Cuenta creada:
Cuenta[789012, Ana L√≥pez, $1000.00]

Intentando establecer saldo negativo con setter...
Error: El saldo no puede ser negativo

Intentando retirar m√°s de lo disponible...
No se puede retirar: fondos insuficientes

Depositando $500...
Dep√≥sito exitoso. Nuevo saldo: $1500.00

Retirando $300...
Retiro exitoso. Nuevo saldo: $1200.00

Estado final:
Cuenta[789012, Ana L√≥pez, $1200.00]

========================================
CONCLUSI√ìN
========================================
‚úì Con encapsulaci√≥n, los datos est√°n protegidos
‚úì La validaci√≥n evita estados inv√°lidos
‚úì El comportamiento est√° controlado mediante m√©todos
```

---

## ‚úÖ Criterios de Evaluaci√≥n

| Criterio | Puntos |
|----------|--------|
| `CuentaBancariaSinEncapsulacion` correcta | 20% |
| `CuentaBancariaConEncapsulacion` correcta | 30% |
| Validaci√≥n en setters | 20% |
| Demostraci√≥n clara de diferencias | 20% |
| C√≥digo limpio y comentado | 10% |

---

## üí° Pistas

1. En la versi√≥n sin encapsulaci√≥n, puedes asignar directamente: `cuenta.saldo = -1000;`
2. En la versi√≥n con encapsulaci√≥n, usa `if` en los setters para validar
3. Los m√©todos `depositar()` y `retirar()` deben validar antes de modificar el saldo
4. Usa `System.out.println()` para mostrar claramente cada problema

---

## üöÄ Desaf√≠o Extra (Opcional)

- Agrega un m√©todo `transferir()` en la versi√≥n con encapsulaci√≥n
- Implementa un contador de transacciones
- Crea un historial de movimientos

---

**Archivos a crear**:
1. `CuentaBancariaSinEncapsulacion.java`
2. `CuentaBancariaConEncapsulacion.java`
3. `DemostracionEncapsulacion.java`

**¬°Comienza a codificar!** üíª

