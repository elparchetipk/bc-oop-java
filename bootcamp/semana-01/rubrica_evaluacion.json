{
  "semana": "01",
  "titulo": "Introducción al Paradigma Orientado a Objetos",
  "descripcion": "Fundamentos de POO: clases, objetos, paradigmas de programación y primer programa orientado a objetos",
  "nota_minima_aprobatoria": 3.0,
  "escala": 5.0,
  "distribucion_evaluacion": {
    "conocimiento": {
      "peso": 30,
      "descripcion": "Cuestionario, preguntas escritas"
    },
    "desempeno": {
      "peso": 40,
      "descripcion": "Ejercicios en clase, taller práctico"
    },
    "producto": {
      "peso": 30,
      "descripcion": "Documento comparativo, código funcional"
    }
  },
  "evidencias": {
    "conocimiento": [
      {
        "id": "C1",
        "nombre": "Cuestionario Teórico",
        "peso": 15,
        "tipo": "cuestionario",
        "descripcion": "15 preguntas sobre POO (opción múltiple y verdadero/falso)",
        "temas": [
          "Historia y características de Java",
          "Paradigmas de programación",
          "Conceptos fundamentales de POO",
          "Ventajas de POO"
        ],
        "criterios": [
          {
            "nombre": "Respuestas correctas",
            "niveles": {
              "excelente": {"rango": [93, 100], "cantidad": "14-15 correctas"},
              "bueno": {"rango": [73, 86], "cantidad": "11-13 correctas"},
              "suficiente": {"rango": [60, 66], "cantidad": "9-10 correctas"},
              "insuficiente": {"rango": [0, 59], "cantidad": "<9 correctas"}
            }
          },
          {
            "nombre": "Comprensión conceptual",
            "niveles": {
              "excelente": "Demuestra dominio total de conceptos POO",
              "bueno": "Comprende la mayoría de conceptos",
              "suficiente": "Comprensión básica suficiente",
              "insuficiente": "Confusión en conceptos fundamentales"
            }
          }
        ],
        "validacion_automatica": {
          "archivo_esperado": "cuestionario_semana01_*.md",
          "minimo_respuestas": 15,
          "palabras_clave": ["POO", "clase", "objeto", "paradigma", "Java"],
          "minimo_palabras": 200
        }
      },
      {
        "id": "C2",
        "nombre": "Preguntas Escritas Abiertas",
        "peso": 15,
        "tipo": "preguntas_abiertas",
        "preguntas_tipo": [
          "Explique las diferencias principales entre programación estructurada y POO",
          "Defina con sus palabras: clase, objeto, atributo y método",
          "¿Por qué es importante la POO en el desarrollo de software moderno?",
          "Proporcione 3 ejemplos de clases del mundo real con sus atributos",
          "¿Cuáles son las ventajas de POO sobre programación estructurada?"
        ],
        "criterios": [
          {
            "nombre": "Precisión conceptual",
            "niveles": {
              "excelente": "Definiciones exactas y completas",
              "bueno": "Definiciones correctas con pequeños detalles",
              "suficiente": "Definiciones básicas pero correctas",
              "insuficiente": "Definiciones incorrectas o confusas"
            }
          },
          {
            "nombre": "Ejemplos proporcionados",
            "niveles": {
              "excelente": "Ejemplos claros, relevantes y originales",
              "bueno": "Ejemplos adecuados",
              "suficiente": "Ejemplos básicos",
              "insuficiente": "Sin ejemplos o irrelevantes"
            }
          }
        ],
        "validacion_automatica": {
          "archivo_esperado": "preguntas_abiertas_*.md",
          "minimo_preguntas": 5,
          "minimo_palabras_por_respuesta": 50,
          "palabras_clave_requeridas": ["clase", "objeto", "atributo", "método", "POO", "estructurada"],
          "minimo_ejemplos": 3
        }
      }
    ],
    "desempeno": [
      {
        "id": "D1",
        "nombre": "Ejercicio en Clase: Crear Clase Persona",
        "peso": 20,
        "tipo": "ejercicio_clase",
        "requerimientos": [
          "Crear clase Persona con atributos: nombre, edad, identificación",
          "Implementar método presentarse() que muestre información",
          "Implementar método calcularAnioNacimiento() que retorne el año",
          "Crear programa PruebaPersona que instancie y use objetos"
        ],
        "criterios": [
          {
            "nombre": "Definición de clase",
            "niveles": {
              "excelente": "Clase correcta con sintaxis perfecta",
              "bueno": "Clase correcta con pequeños errores de estilo",
              "suficiente": "Clase funcional con errores menores",
              "insuficiente": "Clase incompleta o con errores graves"
            }
          },
          {
            "nombre": "Métodos",
            "niveles": {
              "excelente": "2+ métodos bien implementados y documentados",
              "bueno": "2 métodos funcionales",
              "suficiente": "1 método funcional",
              "insuficiente": "Métodos no funcionales"
            }
          },
          {
            "nombre": "Instanciación",
            "niveles": {
              "excelente": "Crea múltiples objetos correctamente",
              "bueno": "Crea 1-2 objetos correctamente",
              "suficiente": "Crea 1 objeto",
              "insuficiente": "No puede instanciar objetos"
            }
          }
        ],
        "validacion_automatica": {
          "archivos_requeridos": ["Persona.java", "PruebaPersona.java"],
          "debe_compilar": true,
          "debe_ejecutar": true,
          "clases_esperadas": ["Persona", "PruebaPersona"],
          "atributos_esperados": ["nombre", "edad", "identificacion"],
          "metodos_esperados": ["presentarse", "calcularAnioNacimiento"],
          "patron_instanciacion": "new\\s+Persona\\s*\\(",
          "minimo_instancias": 1
        }
      },
      {
        "id": "D2",
        "nombre": "Taller Práctico: Implementar Clase según Dominio",
        "peso": 20,
        "tipo": "taller_practico",
        "requerimientos": [
          "Implementar clase según dominio asignado",
          "Mínimo 4 atributos relevantes",
          "Mínimo 3 métodos (incluyendo uno que retorne valor y otro void)",
          "Programa de demostración que muestre funcionalidad"
        ],
        "dominios_posibles": [
          "Vehículo",
          "Producto",
          "Cuenta",
          "Mascota",
          "Empleado",
          "Libro",
          "Estudiante",
          "Película"
        ],
        "criterios": [
          {
            "nombre": "Modelado apropiado",
            "niveles": {
              "excelente": "Clase modela perfectamente el dominio real",
              "bueno": "Modelado adecuado",
              "suficiente": "Modelado básico funcional",
              "insuficiente": "Modelado inadecuado del dominio"
            }
          },
          {
            "nombre": "Atributos",
            "niveles": {
              "excelente": "5+ atributos relevantes con tipos correctos",
              "bueno": "4 atributos apropiados",
              "suficiente": "3 atributos funcionales",
              "insuficiente": "<3 atributos o irrelevantes"
            }
          },
          {
            "nombre": "Métodos",
            "niveles": {
              "excelente": "4+ métodos bien diseñados y funcionales",
              "bueno": "3 métodos funcionales",
              "suficiente": "2 métodos funcionales",
              "insuficiente": "<2 métodos o no funcionales"
            }
          }
        ],
        "validacion_automatica": {
          "archivos_requeridos": ["*.java", "Main.java"],
          "debe_compilar": true,
          "debe_ejecutar": true,
          "minimo_clases": 1,
          "minimo_atributos": 4,
          "minimo_metodos": 3,
          "patron_metodo_void": "void\\s+\\w+\\s*\\([^)]*\\)",
          "patron_metodo_retorno": "(\\w+)\\s+\\w+\\s*\\([^)]*\\)\\s*\\{[^}]*return",
          "minimo_instancias": 2
        }
      }
    ],
    "producto": [
      {
        "id": "P1",
        "nombre": "Documento Comparativo: Paradigmas de Programación",
        "peso": 15,
        "tipo": "documento",
        "requerimientos": [
          "Extensión: 2-4 páginas",
          "Comparación detallada: Programación Estructurada vs POO",
          "Incluir ejemplos de código de ambos paradigmas",
          "Implementar mismo problema en ambos enfoques"
        ],
        "criterios": [
          {
            "nombre": "Estructura del documento",
            "niveles": {
              "excelente": "Muy bien organizado con secciones claras",
              "bueno": "Bien organizado",
              "suficiente": "Estructura básica aceptable",
              "insuficiente": "Desorganizado o incompleto"
            }
          },
          {
            "nombre": "Ejemplos de código",
            "niveles": {
              "excelente": "2+ ejemplos completos y funcionales",
              "bueno": "1-2 ejemplos funcionales",
              "suficiente": "1 ejemplo básico",
              "insuficiente": "Sin ejemplos o no funcionales"
            }
          }
        ],
        "validacion_automatica": {
          "archivo_esperado": "comparacion_paradigmas_*.md",
          "minimo_paginas": 2,
          "minimo_palabras": 800,
          "minimo_bloques_codigo": 2,
          "palabras_clave": ["estructurada", "POO", "clase", "función", "procedimiento"],
          "debe_incluir_seccion": ["introducción", "programación estructurada", "POO", "comparación", "conclusión"]
        }
      },
      {
        "id": "P2",
        "nombre": "Código Funcional: Clase Completa Documentada",
        "peso": 15,
        "tipo": "codigo",
        "requerimientos": [
          "Clase completa según dominio asignado",
          "Mínimo 4 atributos",
          "Mínimo 3 métodos funcionales",
          "Programa Demo que pruebe toda la funcionalidad",
          "Comentarios en el código"
        ],
        "criterios": [
          {
            "nombre": "Compilación",
            "niveles": {
              "excelente": "Compila sin warnings ni errores",
              "bueno": "Compila con warnings menores",
              "suficiente": "Compila con correcciones mínimas",
              "insuficiente": "No compila o errores graves"
            }
          },
          {
            "nombre": "Ejecución",
            "niveles": {
              "excelente": "Ejecuta perfectamente sin errores",
              "bueno": "Ejecuta con comportamiento esperado",
              "suficiente": "Ejecuta con pequeños bugs",
              "insuficiente": "No ejecuta o crashes"
            }
          },
          {
            "nombre": "Calidad del código",
            "niveles": {
              "excelente": "Código limpio, organizado, profesional",
              "bueno": "Código bien estructurado",
              "suficiente": "Código funcional básico",
              "insuficiente": "Código desordenado"
            }
          }
        ],
        "validacion_automatica": {
          "archivos_requeridos": ["*.java", "Demo.java", "README.md"],
          "debe_compilar": true,
          "debe_ejecutar": true,
          "minimo_clases": 2,
          "minimo_atributos": 4,
          "minimo_metodos": 3,
          "minimo_comentarios": 5,
          "patron_comentario": "//|/\\*",
          "minimo_lineas_codigo": 50,
          "convenciones_nombres": {
            "clases": "^[A-Z][a-zA-Z0-9]*$",
            "metodos": "^[a-z][a-zA-Z0-9]*$",
            "atributos": "^[a-z][a-zA-Z0-9]*$"
          }
        }
      }
    ]
  },
  "formula_calificacion": "NotaFinal = (Cuestionario * 0.15) + (Preguntas * 0.15) + (EjercicioClase * 0.20) + (Taller * 0.20) + (Documento * 0.15) + (Codigo * 0.15)",
  "configuracion_script_automatizacion": {
    "lenguaje": "python",
    "api": "claude",
    "timeout_compilacion": 30,
    "timeout_ejecucion": 60,
    "encoding": "utf-8",
    "version_java_minima": "17",
    "patron_estructura_repo": "semana-01/",
    "archivos_ignorar": [".class", ".jar", ".idea/", "target/", "bin/", "out/"],
    "prompts_claude": {
      "evaluar_cuestionario": "Analiza las respuestas del cuestionario de POO y evalúa según la rúbrica. Identifica conceptos correctos e incorrectos.",
      "evaluar_codigo": "Analiza el código Java proporcionado. Verifica: 1) Sintaxis correcta, 2) Presencia de clases y métodos, 3) Uso apropiado de POO, 4) Calidad del código. Proporciona puntuación según rúbrica.",
      "evaluar_documento": "Evalúa el documento comparativo. Verifica: 1) Claridad conceptual, 2) Ejemplos de código, 3) Comparación estructurada vs POO, 4) Conclusiones apropiadas."
    }
  }
}
